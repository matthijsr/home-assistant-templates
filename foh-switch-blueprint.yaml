blueprint:
  name: Predefined FoH Switch controls
  description:
    Controller automation for executing press/hold/release after hold actions triggered by EnOcean PTM 215Z (Friends of Hue) switch.
    Make sure that 'Elapsed' is enabled in the z2m advanced settings
  domain: automation
  input:
    controller:
      name: (Zigbee2MQTT) Controller Name
      description: The name of the controller as defined in z2m (e.g. Livingroom Switch)
      default: ""
    base_topic:
      name: (Zigbee2MQTT) Base mqtt topic
      description: The base topic as configured in z2m
      default: zigbee2mqtt
    left_lights:
      name: Left controls (Zigbee2MQTT) lights
      description: The name(s) of the light(s) as defined in z2m to be controlled by the left side of the remote
      selector:
        text:
          multiple: true
    right_lights:
      name: Right controls (Zigbee2MQTT) lights
      description: The name(s) of the light(s) as defined in z2m to be controlled by the right side of the remote
      selector:
        text:
          multiple: true
    hold_delay:
      name: Hold delay
      description:
        If the button has been held more than the configured Hold delay, the corresponding held action is triggered.
      default: 500
      selector:
        number:
          min: 100.0
          max: 1000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 10.0
mode: restart
max_exceeded: silent
variables:
  hold_delay: !input "hold_delay"
trigger_variables:
  base_topic: !input "base_topic"
  controller: !input "controller"
trigger:
  - platform: mqtt
    topic: "{{ base_topic ~ '/' ~ controller }}"
condition:
  - condition: template
    value_template: >
      {{
        ((trigger.payload_json.elapsed is defined and
        trigger.payload_json.elapsed > hold_delay) or
        trigger.payload_json.elapsed is not defined) and
        trigger.payload_json.action != Null
      }}
action:
  - variables:
      controller: !input "controller"
  - choose:
      - conditions: '{{ "press_" | string in trigger.payload_json.action }}'
        sequence:
          - wait_for_trigger:
              - platform: mqtt
                topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"
                payload: release_1
              - platform: mqtt
                topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"
                payload: release_2
              - platform: mqtt
                topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"
                payload: release_3
              - platform: mqtt
                topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"
                payload: release_4
              - platform: mqtt
                topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"
                payload: release_1_and_3
              - platform: mqtt
                topic: "{{ base_topic ~ '/' ~ controller ~ '/action' }}"
                payload: release_2_and_4
            timeout:
              milliseconds: !input "hold_delay"
          - choose:
              - conditions:
                  '{{ trigger.payload_json.action == "press_1" and wait.trigger.payload == "release_1" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "on" }'
                      for_each: !input "left_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_2" and wait.trigger.payload == "release_2" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "off" }'
                      for_each: !input "left_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_3" and wait.trigger.payload == "release_3" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "on" }'
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_4" and wait.trigger.payload == "release_4" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "off" }'
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_1_and_3" and wait.trigger.payload == "release_1_and_3" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "on" }'
                      for_each: !input "left_lights"
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "on" }'
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_2_and_4" and wait.trigger.payload == "release_2_and_4" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "off" }'
                      for_each: !input "left_lights"
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: '{ "state": "off" }'
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_1" and wait.trigger == None }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": 40 }"
                      for_each: !input "left_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_2" and wait.trigger == None }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": -40 }"
                      for_each: !input "left_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_3" and wait.trigger == None }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": 40 }"
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_4" and wait.trigger == None }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": -40 }"
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_1_and_3" and wait.trigger == None }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": 40 }"
                      for_each: !input "left_lights"
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": 40 }"
                      for_each: !input "right_lights"
              - conditions:
                  '{{ trigger.payload_json.action == "press_2_and_4" and wait.trigger == None }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": -40 }"
                      for_each: !input "left_lights"
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": -40 }"
                      for_each: !input "right_lights"
      - conditions: '{{ "release_" | string in trigger.payload_json.action }}'
        sequence:
          - choose:
              - conditions: '{{ trigger.payload_json.action == "release_1" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "left_lights"
              - conditions: '{{ trigger.payload_json.action == "release_2" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "left_lights"
              - conditions: '{{ trigger.payload_json.action == "release_3" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "right_lights"
              - conditions: '{{ trigger.payload_json.action == "release_4" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "right_lights"
              - conditions: '{{ trigger.payload_json.action == "release_1_and_3" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "left_lights"
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "right_lights"
              - conditions: '{{ trigger.payload_json.action == "release_2_and_4" }}'
                sequence:
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "left_lights"
                  - repeat:
                      sequence:
                        - action: mqtt.publish
                          data:
                            topic: '{{ "zigbee2mqtt/" ~ repeat.item ~ "/set" }}'
                            payload: "{ \"brightness_move\": \"stop\" }"
                      for_each: !input "right_lights"
