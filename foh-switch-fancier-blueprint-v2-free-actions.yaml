blueprint:
  name: FoH Switch V2 with arbitrary actions
  description:
    Controller automation for executing press/hold/release after hold actions triggered by EnOcean PTM 215Z (Friends of Hue) switch.
    Make sure that 'Elapsed' is enabled in the z2m advanced settings
  domain: automation
  input:
    controller:
      name: (Zigbee2MQTT) Controller Name
      description: The name of the controller as defined in Zigbee2MQTT (e.g. Livingroom Switch)
      default: ""
    base_topic:
      name: (Zigbee2MQTT) Base mqtt topic
      description: The base topic as configured in Zigbee2MQTT
      default: zigbee2mqtt
    left_number:
      name: Left payload helper
      description: The number helper containing for cycling payloads when the top left button is pressed multiple times.
      default: {}
      selector:
        target:
          entity:
            domain: counter
    right_number:
      name: Right payload helper
      description: The number helper containing for cycling payloads when the top right button is pressed multiple times.
      default: {}
      selector:
        target:
          entity:
            domain: counter
    cycle_delay:
      name: Cycle delay
      description:
        If the button hasn't been interacted with for more than the configurable Cycle delay, reset to using the first payload.
      default: 3000
      selector:
        number:
          min: 1000.0
          max: 10000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 1000.0
    hold_delay:
      name: Hold delay
      description:
        If the button has been held more than the configured Hold delay, the corresponding held action is triggered.
      default: 250
      selector:
        number:
          min: 100.0
          max: 1000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 10.0
    left_top_press:
      name: Left top press (released before hold delay)
      description: Action to run
      default: []
      selector:
        action: {}
    left_top_hold_initial:
      name: Left top hold, initially (guaranteed - useful for turning on a light before starting to increase brightness, may overlap with regular press)
      description: Action to run
      default: []
      selector:
        action: {} 
    left_top_hold:
      name: Left top hold (after hold delay)
      description: Action to run
      default: []
      selector:
        action: {} 
    left_top_release:
      name: Left top release after hold
      description: Action to run
      default: []
      selector:
        action: {} 
    left_bottom_press:
      name: Left bottom press (released before hold delay)
      description: Action to run
      default: []
      selector:
        action: {}
    left_bottom_hold:
      name: Left bottom hold (after hold delay)
      description: Action to run
      default: []
      selector:
        action: {} 
    left_bottom_release:
      name: Left bottom release after hold
      description: Action to run
      default: []
      selector:
        action: {} 
    right_top_press:
      name: Right top press (released before hold delay)
      description: Action to run
      default: []
      selector:
        action: {}
    right_top_hold_initial:
      name: Right top hold, initially (guaranteed - useful for turning on a light before starting to increase brightness, may overlap with regular press)
      description: Action to run
      default: []
      selector:
        action: {} 
    right_top_hold:
      name: Right top hold (after hold delay)
      description: Action to run
      default: []
      selector:
        action: {} 
    right_top_release:
      name: Right top release after hold
      description: Action to run
      default: []
      selector:
        action: {} 
    right_bottom_press:
      name: Right bottom press (released before hold delay)
      description: Action to run
      default: []
      selector:
        action: {}
    right_bottom_hold:
      name: Right bottom hold (after hold delay)
      description: Action to run
      default: []
      selector:
        action: {} 
    right_bottom_release:
      name: Right bottom release after hold
      description: Action to run
      default: []
      selector:
        action: {} 
mode: restart
max_exceeded: silent
variables:
  hold_delay: !input hold_delay
  cycle_delay: !input cycle_delay
trigger_variables:
  base_topic: !input base_topic
  controller: !input controller
trigger:
  - platform: mqtt
    topic: '{{ base_topic ~ ''/'' ~ controller }}'
condition:
  - condition: template
    value_template: |
      {{
        ('release_' in trigger.payload_json.action and trigger.payload_json.elapsed is defined)
        or 'press_' in trigger.payload_json.action
      }}
action:
  - variables:
      controller: !input controller
      left_number: !input left_number
      right_number: !input right_number
  - choose:
      - conditions: >-
          {{ "release_" in trigger.payload_json.action and
          trigger.payload_json.elapsed | int < hold_delay }}
        sequence:
          - if: '{{ trigger.payload_json.action == "release_1" or trigger.payload_json.action == "release_1_and_3" }}'
            then:
              - if: '{{ not not left_number }}'
                then:
                  - if: '{{ states(left_number.entity_id) | int >= 100000}}'
                    then:
                      - action: counter.set_value
                        target: !input left_number
                        data:
                          value: 0
                      - sequence: !input left_top_press
                    else:
                      - action: counter.increment
                        target: !input left_number
                      - sequence: !input left_top_press
          - if: '{{ trigger.payload_json.action == "release_3" or trigger.payload_json.action == "release_1_and_3" }}'
            then:
              - if: '{{ not not right_number }}'
                then:
                  - if: '{{ states(right_number.entity_id) | int >= 100000}}'
                    then:
                      - action: counter.set_value
                        target: !input right_number
                        data:
                          value: 0
                      - sequence: !input right_top_press
                    else:
                      - action: counter.increment
                        target: !input right_number
                      - sequence: !input right_top_press
          - if: '{{ trigger.payload_json.action == "release_2" or trigger.payload_json.action == "release_2_and_4" }}'
            then:
              - sequence: !input left_bottom_press
              - if: '{{ not not left_number }}'
                then:
                  - action: counter.reset
                    target: !input left_number
          - if: '{{ trigger.payload_json.action == "release_4" or trigger.payload_json.action == "release_2_and_4" }}'
            then:
              - sequence: !input right_bottom_press
              - if: '{{ not not right_number }}'
                then:
                  - action: counter.reset
                    target: !input right_number
      - conditions: '{{ "press_" | string in trigger.payload_json.action }}'
        sequence:
          - if: '{{ trigger.payload_json.elapsed | int >= cycle_delay }}'
            then:
              - if: '{{ not not left_number and (trigger.payload_json.action == "press_1" or trigger.payload_json.action == "press_1_and_3") }}'
                then:
                  - action: counter.reset
                    target: !input left_number
              - if: '{{ not not right_number and (trigger.payload_json.action == "press_3" or trigger.payload_json.action == "press_1_and_3") }}'
                then:
                  - action: counter.reset
                    target: !input right_number
          - if: '{{ trigger.payload_json.action == "press_1" or trigger.payload_json.action == "press_1_and_3" }}'
            then:
              - sequence: !input left_top_hold_initial
          - if: '{{ trigger.payload_json.action == "press_3" or trigger.payload_json.action == "press_1_and_3" }}'
            then:
              - sequence: !input right_top_hold_initial
          - delay:
              milliseconds: !input hold_delay
          - if: '{{ trigger.payload_json.action == "press_1" or trigger.payload_json.action == "press_1_and_3" }}'
            then:
              - sequence: !input left_top_hold
          - if: '{{ trigger.payload_json.action == "press_2" or trigger.payload_json.action == "press_2_and_4" }}'
            then:
              - sequence: !input left_bottom_hold
          - if: '{{ trigger.payload_json.action == "press_3" or trigger.payload_json.action == "press_1_and_3" }}'
            then:
              - sequence: !input right_top_hold
          - if: '{{ trigger.payload_json.action == "press_4" or trigger.payload_json.action == "press_2_and_4" }}'
            then:
              - sequence: !input right_bottom_hold
      - conditions: >-
          {{ "release_" in trigger.payload_json.action and
          trigger.payload_json.elapsed | int > hold_delay }}
        sequence:
          - if: '{{ trigger.payload_json.action == "release_1" or trigger.payload_json.action == "release_1_and_3" }}'
            then:
              - sequence: !input left_top_release
          - if: '{{ trigger.payload_json.action == "release_2" or trigger.payload_json.action == "release_2_and_4" }}'
            then:
              - sequence: !input left_bottom_release
          - if: '{{ trigger.payload_json.action == "release_3" or trigger.payload_json.action == "release_1_and_3" }}'
            then:
              - sequence: !input right_top_release
          - if: '{{ trigger.payload_json.action == "release_4" or trigger.payload_json.action == "release_2_and_4" }}'
            then:
              - sequence: !input right_bottom_release
